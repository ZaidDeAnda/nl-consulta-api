from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from typing import Optional
import uvicorn
import logging
from logging.handlers import RotatingFileHandler
import pandas as pd
import re
import os
import urllib.parse

description = """
API de b√∫squeda para tr√°mites de la Secretaria de Igualdad e Inclusi√≥n del gobierno de Nuevo Le√≥n. ü¶Å¬¥

Tiene un √∫nico endpoint, **/buscar**

## Buscar

Puedes buscar usuarios que hayan sigo acreedores o est√©n en proceso de un tr√°mite de la secretaria.
Tiene 3 opciones de b√∫squeda:

* CURP
* Nombres
* Apellidos

Para seleccionar la opci√≥n de b√∫squeda, basta con mandar como par√°metro en la url el m√©todo, es decir:

https://url/buscar?metodo=curp

Si no se selecciona ninguna opci√≥n, le har√° query de todos los usuarios en la DB. Para no sobrecargar la respuesta,
los usuarios que regresa est√°n paginados. Los par√°metros usados en la paginaci√≥n son:

* page
* page_size

Tambi√©n pueden ser agregados como par√°metro en la url.
"""

app = FastAPI(
    title="API de b√∫squeda SII",
    description=description,
    version="0.0.1",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Zaid De Anda, desarrollador",
        "email": "zaidy.deanda@gmail.com",
    })

# Configuraci√≥n de logging
logger = logging.getLogger("my_logger")
logger.setLevel(logging.DEBUG)

# Configurar el manejador de registro para escribir en un archivo de registro
handler = RotatingFileHandler("app.log", maxBytes=1024 * 1024, backupCount=5)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Cargar el archivo JSON
basePath = os.path.dirname(os.path.abspath(__file__))
file = basePath+"/data_good.json"
print(f"file location: {file}")
data = pd.read_json(file, encoding="utf-8")
data["apellidos"] = data["ap_materno"] + " " + data["ap_paterno"]
data = data.fillna(value=0)

# Expresi√≥n regular para validar CURP
CURP_REGEX = r'^[A-Z]{4}\d{6}[HM][A-Z]{5}[0-9A-Z]\d$'

def validate_curp(curp):
    if re.match(CURP_REGEX, curp):
        return True
    return False

# Ruta para buscar un registro por CURP o listar todos los registros
@app.get("/buscar/")
async def buscar_registros(
    metodo: Optional[str] = None,
    valor: Optional[str] = None,
    page: int = 1,
    page_size: int = 10,
):
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size

    if metodo is None:
        logger.info("Se recibio request de toda la tabla")
        filtered_data = data
        total_records = len(data)
    else:
        if valor is None:
            logger.error(f"Se recibio un request con m√©todo {metodo} pero sin valor de busqueda")
            raise HTTPException(status_code=400, detail="El par√°metro 'valor' es obligatorio cuando se proporciona 'm√©todo'")
        if metodo not in ("apellidos", "nombres", "curp"):
            logger.error(f"Se recibio un request con m√©todo inv√°lido {metodo}")
            raise HTTPException(status_code=400, detail="M√©todo de b√∫squeda no v√°lido")
        logger.info(f"Se recibio un request con metodo {metodo}")
        valor = urllib.parse.unquote(valor)
        if metodo == "apellidos":
            filtered_data = data.loc[data["apellidos"] == valor]
        elif metodo == "nombres":
            filtered_data = data.loc[data["nombres"] == valor]
        elif metodo == "curp":
            if not validate_curp(valor):
                logger.error(f"Se recibio un request con metodo {metodo} pero el curp no tenia un formato valido")
                logger.error(f"Curp enviado: {valor}")
                raise HTTPException(status_code=400, detail="CURP no v√°lido")
            filtered_data = data.loc[data["CURP"] == valor]
        total_records = len(filtered_data)
        if total_records < 1:
            logger.error(f"Se recibio un request con metodo {metodo} pero no fue encontrado")
            raise HTTPException(status_code=404, detail=f"{metodo} no encontrado")
    
    if start_idx >= total_records:
        return []

    if end_idx >= total_records:
        end_idx = total_records

    paginated_data = filtered_data.iloc[start_idx:end_idx]
    final_data = paginated_data.to_dict(orient="records")[0]
    response = {
        "status" : "success",
        "data" : final_data,
        "mensaje" : "Query realizado con √©xito",
        "status_code" : 200
    }
    return JSONResponse(content=response)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)